-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity axil_conv2D0 is
generic (
    C_S_AXI_BUS1_ADDR_WIDTH : INTEGER := 14;
    C_S_AXI_BUS1_DATA_WIDTH : INTEGER := 32 );
port (
    ap_local_block : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_BUS1_AWVALID : IN STD_LOGIC;
    s_axi_BUS1_AWREADY : OUT STD_LOGIC;
    s_axi_BUS1_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_BUS1_ADDR_WIDTH-1 downto 0);
    s_axi_BUS1_WVALID : IN STD_LOGIC;
    s_axi_BUS1_WREADY : OUT STD_LOGIC;
    s_axi_BUS1_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_BUS1_DATA_WIDTH-1 downto 0);
    s_axi_BUS1_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_BUS1_DATA_WIDTH/8-1 downto 0);
    s_axi_BUS1_ARVALID : IN STD_LOGIC;
    s_axi_BUS1_ARREADY : OUT STD_LOGIC;
    s_axi_BUS1_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_BUS1_ADDR_WIDTH-1 downto 0);
    s_axi_BUS1_RVALID : OUT STD_LOGIC;
    s_axi_BUS1_RREADY : IN STD_LOGIC;
    s_axi_BUS1_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_BUS1_DATA_WIDTH-1 downto 0);
    s_axi_BUS1_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_BUS1_BVALID : OUT STD_LOGIC;
    s_axi_BUS1_BREADY : IN STD_LOGIC;
    s_axi_BUS1_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of axil_conv2D0 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "axil_conv2D0_axil_conv2D0,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.601750,HLS_SYN_LAT=122401,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=509,HLS_SYN_LUT=750,HLS_VERSION=2021_2}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv12_E10 : STD_LOGIC_VECTOR (11 downto 0) := "111000010000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv6_3C : STD_LOGIC_VECTOR (5 downto 0) := "111100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal ap_local_deadlock : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal img_in_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal img_out_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal img_out_ce0 : STD_LOGIC;
    signal img_out_we0 : STD_LOGIC;
    signal img_out_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bias : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_V_fu_141_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal acc_V_reg_387 : STD_LOGIC_VECTOR (20 downto 0);
    signal select_ln23_fu_213_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln23_reg_395 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln1072_1_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1072_fu_262_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln1072_reg_400 : STD_LOGIC_VECTOR (5 downto 0);
    signal ret_fu_275_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_reg_405 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_axil_conv2D0_Pipeline_loop_k1_loop_k2_fu_129_ap_start : STD_LOGIC;
    signal grp_axil_conv2D0_Pipeline_loop_k1_loop_k2_fu_129_ap_done : STD_LOGIC;
    signal grp_axil_conv2D0_Pipeline_loop_k1_loop_k2_fu_129_ap_idle : STD_LOGIC;
    signal grp_axil_conv2D0_Pipeline_loop_k1_loop_k2_fu_129_ap_ready : STD_LOGIC;
    signal grp_axil_conv2D0_Pipeline_loop_k1_loop_k2_fu_129_weights_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_axil_conv2D0_Pipeline_loop_k1_loop_k2_fu_129_weights_ce0 : STD_LOGIC;
    signal grp_axil_conv2D0_Pipeline_loop_k1_loop_k2_fu_129_img_in_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_axil_conv2D0_Pipeline_loop_k1_loop_k2_fu_129_img_in_ce0 : STD_LOGIC;
    signal grp_axil_conv2D0_Pipeline_loop_k1_loop_k2_fu_129_acc_V_2_out : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_axil_conv2D0_Pipeline_loop_k1_loop_k2_fu_129_acc_V_2_out_ap_vld : STD_LOGIC;
    signal grp_axil_conv2D0_Pipeline_loop_k1_loop_k2_fu_129_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln587_fu_356_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal rhs_fu_94 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln885_1_fu_281_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal orow_V_fu_98 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten7_fu_102 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1072_fu_198_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl1_fu_174_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_fu_166_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl1_cast_fu_182_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln1072_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln885_fu_222_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl1_mid1_fu_236_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_mid1_fu_228_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl1_cast_mid1_fu_244_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal lhs_mid1_fu_248_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal lhs_fu_186_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln23_1_fu_254_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1540_fu_271_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_305_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln1080_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_321_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1080_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1080_fu_333_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln229_fu_329_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component axil_conv2D0_axil_conv2D0_Pipeline_loop_k1_loop_k2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        acc_V : IN STD_LOGIC_VECTOR (20 downto 0);
        select_ln1072 : IN STD_LOGIC_VECTOR (5 downto 0);
        select_ln23 : IN STD_LOGIC_VECTOR (5 downto 0);
        weights_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        weights_ce0 : OUT STD_LOGIC;
        weights_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        img_in_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        img_in_ce0 : OUT STD_LOGIC;
        img_in_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        acc_V_2_out : OUT STD_LOGIC_VECTOR (20 downto 0);
        acc_V_2_out_ap_vld : OUT STD_LOGIC );
    end component;


    component axil_conv2D0_BUS1_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        bias : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        weights_ce0 : IN STD_LOGIC;
        weights_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_in_address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        img_in_ce0 : IN STD_LOGIC;
        img_in_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_out_address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        img_out_ce0 : IN STD_LOGIC;
        img_out_we0 : IN STD_LOGIC;
        img_out_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_local_deadlock : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    grp_axil_conv2D0_Pipeline_loop_k1_loop_k2_fu_129 : component axil_conv2D0_axil_conv2D0_Pipeline_loop_k1_loop_k2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_axil_conv2D0_Pipeline_loop_k1_loop_k2_fu_129_ap_start,
        ap_done => grp_axil_conv2D0_Pipeline_loop_k1_loop_k2_fu_129_ap_done,
        ap_idle => grp_axil_conv2D0_Pipeline_loop_k1_loop_k2_fu_129_ap_idle,
        ap_ready => grp_axil_conv2D0_Pipeline_loop_k1_loop_k2_fu_129_ap_ready,
        acc_V => acc_V_reg_387,
        select_ln1072 => select_ln1072_reg_400,
        select_ln23 => select_ln23_reg_395,
        weights_address0 => grp_axil_conv2D0_Pipeline_loop_k1_loop_k2_fu_129_weights_address0,
        weights_ce0 => grp_axil_conv2D0_Pipeline_loop_k1_loop_k2_fu_129_weights_ce0,
        weights_q0 => weights_q0,
        img_in_address0 => grp_axil_conv2D0_Pipeline_loop_k1_loop_k2_fu_129_img_in_address0,
        img_in_ce0 => grp_axil_conv2D0_Pipeline_loop_k1_loop_k2_fu_129_img_in_ce0,
        img_in_q0 => img_in_q0,
        acc_V_2_out => grp_axil_conv2D0_Pipeline_loop_k1_loop_k2_fu_129_acc_V_2_out,
        acc_V_2_out_ap_vld => grp_axil_conv2D0_Pipeline_loop_k1_loop_k2_fu_129_acc_V_2_out_ap_vld);

    BUS1_s_axi_U : component axil_conv2D0_BUS1_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_BUS1_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_BUS1_DATA_WIDTH)
    port map (
        AWVALID => s_axi_BUS1_AWVALID,
        AWREADY => s_axi_BUS1_AWREADY,
        AWADDR => s_axi_BUS1_AWADDR,
        WVALID => s_axi_BUS1_WVALID,
        WREADY => s_axi_BUS1_WREADY,
        WDATA => s_axi_BUS1_WDATA,
        WSTRB => s_axi_BUS1_WSTRB,
        ARVALID => s_axi_BUS1_ARVALID,
        ARREADY => s_axi_BUS1_ARREADY,
        ARADDR => s_axi_BUS1_ARADDR,
        RVALID => s_axi_BUS1_RVALID,
        RREADY => s_axi_BUS1_RREADY,
        RDATA => s_axi_BUS1_RDATA,
        RRESP => s_axi_BUS1_RRESP,
        BVALID => s_axi_BUS1_BVALID,
        BREADY => s_axi_BUS1_BREADY,
        BRESP => s_axi_BUS1_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        bias => bias,
        weights_address0 => grp_axil_conv2D0_Pipeline_loop_k1_loop_k2_fu_129_weights_address0,
        weights_ce0 => grp_axil_conv2D0_Pipeline_loop_k1_loop_k2_fu_129_weights_ce0,
        weights_q0 => weights_q0,
        img_in_address0 => grp_axil_conv2D0_Pipeline_loop_k1_loop_k2_fu_129_img_in_address0,
        img_in_ce0 => grp_axil_conv2D0_Pipeline_loop_k1_loop_k2_fu_129_img_in_ce0,
        img_in_q0 => img_in_q0,
        img_out_address0 => img_out_address0,
        img_out_ce0 => img_out_ce0,
        img_out_we0 => img_out_we0,
        img_out_d0 => img_out_d0,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_local_deadlock => ap_local_deadlock);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_axil_conv2D0_Pipeline_loop_k1_loop_k2_fu_129_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_axil_conv2D0_Pipeline_loop_k1_loop_k2_fu_129_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1072_1_fu_192_p2 = ap_const_lv1_0))) then 
                    grp_axil_conv2D0_Pipeline_loop_k1_loop_k2_fu_129_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_axil_conv2D0_Pipeline_loop_k1_loop_k2_fu_129_ap_ready = ap_const_logic_1)) then 
                    grp_axil_conv2D0_Pipeline_loop_k1_loop_k2_fu_129_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten7_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten7_fu_102 <= ap_const_lv12_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1072_1_fu_192_p2 = ap_const_lv1_0))) then 
                indvar_flatten7_fu_102 <= add_ln1072_fu_198_p2;
            end if; 
        end if;
    end process;

    orow_V_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                orow_V_fu_98 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1072_1_fu_192_p2 = ap_const_lv1_0))) then 
                orow_V_fu_98 <= select_ln1072_fu_262_p3;
            end if; 
        end if;
    end process;

    rhs_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                rhs_fu_94 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1072_1_fu_192_p2 = ap_const_lv1_0))) then 
                rhs_fu_94 <= add_ln885_1_fu_281_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                acc_V_reg_387 <= acc_V_fu_141_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1072_1_fu_192_p2 = ap_const_lv1_0))) then
                ret_reg_405 <= ret_fu_275_p2;
                select_ln1072_reg_400 <= select_ln1072_fu_262_p3;
                select_ln23_reg_395 <= select_ln23_fu_213_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln1072_1_fu_192_p2, grp_axil_conv2D0_Pipeline_loop_k1_loop_k2_fu_129_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1072_1_fu_192_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_axil_conv2D0_Pipeline_loop_k1_loop_k2_fu_129_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    acc_V_fu_141_p1 <= bias(21 - 1 downto 0);
    add_ln1072_fu_198_p2 <= std_logic_vector(unsigned(indvar_flatten7_fu_102) + unsigned(ap_const_lv12_1));
    add_ln885_1_fu_281_p2 <= std_logic_vector(unsigned(select_ln23_fu_213_p3) + unsigned(ap_const_lv6_1));
    add_ln885_fu_222_p2 <= std_logic_vector(unsigned(orow_V_fu_98) + unsigned(ap_const_lv6_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_axil_conv2D0_Pipeline_loop_k1_loop_k2_fu_129_ap_done)
    begin
        if ((grp_axil_conv2D0_Pipeline_loop_k1_loop_k2_fu_129_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln1072_1_fu_192_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1072_1_fu_192_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_local_block <= ap_const_logic_0;
    ap_local_deadlock <= ap_const_lv1_0;

    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln1072_1_fu_192_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1072_1_fu_192_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_axil_conv2D0_Pipeline_loop_k1_loop_k2_fu_129_ap_start <= grp_axil_conv2D0_Pipeline_loop_k1_loop_k2_fu_129_ap_start_reg;
    icmp_ln1072_1_fu_192_p2 <= "1" when (indvar_flatten7_fu_102 = ap_const_lv12_E10) else "0";
    icmp_ln1072_fu_207_p2 <= "1" when (rhs_fu_94 = ap_const_lv6_3C) else "0";
    icmp_ln1080_fu_315_p2 <= "1" when (signed(tmp_fu_305_p4) > signed(ap_const_lv13_0)) else "0";
    img_out_address0 <= zext_ln587_fu_356_p1(12 - 1 downto 0);

    img_out_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            img_out_ce0 <= ap_const_logic_1;
        else 
            img_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    img_out_d0 <= 
        select_ln1080_fu_333_p3 when (or_ln1080_fu_341_p2(0) = '1') else 
        trunc_ln229_fu_329_p1;

    img_out_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            img_out_we0 <= ap_const_logic_1;
        else 
            img_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    lhs_fu_186_p2 <= std_logic_vector(unsigned(p_shl_fu_166_p3) - unsigned(p_shl1_cast_fu_182_p1));
    lhs_mid1_fu_248_p2 <= std_logic_vector(unsigned(p_shl_mid1_fu_228_p3) - unsigned(p_shl1_cast_mid1_fu_244_p1));
    or_ln1080_fu_341_p2 <= (tmp_1_fu_321_p3 or icmp_ln1080_fu_315_p2);
    p_shl1_cast_fu_182_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_174_p3),12));
    p_shl1_cast_mid1_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_mid1_fu_236_p3),12));
    p_shl1_fu_174_p3 <= (orow_V_fu_98 & ap_const_lv2_0);
    p_shl1_mid1_fu_236_p3 <= (add_ln885_fu_222_p2 & ap_const_lv2_0);
    p_shl_fu_166_p3 <= (orow_V_fu_98 & ap_const_lv6_0);
    p_shl_mid1_fu_228_p3 <= (add_ln885_fu_222_p2 & ap_const_lv6_0);
    ret_fu_275_p2 <= std_logic_vector(unsigned(select_ln23_1_fu_254_p3) + unsigned(zext_ln1540_fu_271_p1));
    select_ln1072_fu_262_p3 <= 
        add_ln885_fu_222_p2 when (icmp_ln1072_fu_207_p2(0) = '1') else 
        orow_V_fu_98;
    select_ln1080_fu_333_p3 <= 
        ap_const_lv8_FF when (icmp_ln1080_fu_315_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln23_1_fu_254_p3 <= 
        lhs_mid1_fu_248_p2 when (icmp_ln1072_fu_207_p2(0) = '1') else 
        lhs_fu_186_p2;
    select_ln23_fu_213_p3 <= 
        ap_const_lv6_0 when (icmp_ln1072_fu_207_p2(0) = '1') else 
        rhs_fu_94;
    tmp_1_fu_321_p3 <= grp_axil_conv2D0_Pipeline_loop_k1_loop_k2_fu_129_acc_V_2_out(20 downto 20);
    tmp_fu_305_p4 <= grp_axil_conv2D0_Pipeline_loop_k1_loop_k2_fu_129_acc_V_2_out(20 downto 8);
    trunc_ln229_fu_329_p1 <= grp_axil_conv2D0_Pipeline_loop_k1_loop_k2_fu_129_acc_V_2_out(8 - 1 downto 0);
    zext_ln1540_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln23_fu_213_p3),12));
    zext_ln587_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_reg_405),64));
end behav;
